<%
  package model
  
 import (
  "strings"
  "github.com/boourns/scaffold/ast"
  "github.com/boourns/scaffold/util"
  "github.com/boourns/scaffold/sqlgen"
  "fmt"
  )
 
 func modelTemplate(w io.Writer, m *ast.Model) {
%>

package <%== strings.ToLower(m.Package) %>

import (
	"github.com/boourns/dblib"
  "database/sql"
  "fmt"
)

func sqlFieldsFor<%== m.Name %>() string {
  return "<%== fieldString(fmt.Sprintf("%s.", m.Name), m.FieldSlice(), "") %>" // ADD FIELD HERE
}

func load<%== m.Name %>(rows *sql.Rows) (*<%== m.Name %>, error) {
	ret := <%== m.Name %>{}

	err := rows.Scan(<%== fieldString("&ret.", m.FieldSlice(), "") %>) // ADD FIELD HERE
	if err != nil {
		return nil, err
	}
	return &ret, nil
}

func Select<%== m.Name %>(tx dblib.DBLike, cond string, condFields ...interface{}) ([]*<%== m.Name %>, error) {
  ret := []*<%==m.Name%>{}
  sql := fmt.Sprintf("SELECT %s from <%== m.Name %> %s", sqlFieldsFor<%==m.Name%>(), cond)
	rows, err := tx.Query(sql, condFields...)
	if err != nil {
		return nil, err
	}
	for rows.Next() {
    item, err := load<%== m.Name %>(rows)
    if err != nil {
      return nil, err
    }
    ret = append(ret, item)
  }
  rows.Close()
  return ret, nil
}

func (s *<%== m.Name %>) Update(tx dblib.DBLike) error {
		stmt, err := tx.Prepare(fmt.Sprintf("UPDATE <%== m.Name %> SET <%== fieldString("", m.FieldSlice(), "=?") %> WHERE <%== m.Name %>.ID = ?", )) // ADD FIELD HERE

		if err != nil {
			return err
		}

    params := []interface{}{<%== fieldString("s.", m.FieldSlice(), "") %>} // ADD FIELD HERE
    params = append(params, s.ID)

		_, err = stmt.Exec(params...)
		if err != nil {
			return err
		}

    return nil
}

func (s *<%== m.Name %>) Insert(tx dblib.DBLike) error {
		stmt, err := tx.Prepare("INSERT INTO <%== m.Name %>(<%== fieldString("", m.FieldSliceWithoutID(), "") %>) VALUES(<%== util.QuestionMarks(len(m.FieldSliceWithoutID())) %>)") // ADD FIELD HERE
		if err != nil {
			return err
		}

		result, err := stmt.Exec(<%== fieldString("s.", m.FieldSliceWithoutID(), "") %>) // ADD FIELD HERE
		if err != nil {
			return err
    }

    s.ID, err = result.LastInsertId()
    if err != nil {
      return err
    }
	  return nil
}

func (s *<%== m.Name %>) Delete(tx dblib.DBLike) error {
		stmt, err := tx.Prepare("DELETE FROM <%== m.Name %> WHERE ID = ?")
		if err != nil {
			return err
		}

		_, err = stmt.Exec(s.ID)
		if err != nil {
			return err
    }

	  return nil
}

func Create<%== m.Name %>Table(tx dblib.DBLike) error {
		stmt, err := tx.Prepare(`<%== sqlgen.CreateTable(m) %>`)
		if err != nil {
			return err
		}

		_, err = stmt.Exec()
		if err != nil {
			return err
		}
	  return nil
}
<% } %>
